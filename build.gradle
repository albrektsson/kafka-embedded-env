buildscript {
    ext.kotlin_version = '1.3.11'
    ext.zookeeper_version = '3.4.13'
    ext.kafka_version = '2.0.1'
    ext.commons_version = '1.3.2'
    ext.confluent_version = '5.0.0'
    ext.kluent_version = '1.46'
    ext.spek_version = '2.0.0-rc.1'
    ext.ktor_version = '1.1.1'
    ext.slf4j_version = '1.7.5'
    ext.logback_version = '1.2.3'
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
    id 'maven-publish'
    id 'org.jmailen.kotlinter' version '1.20.1'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id "org.jetbrains.dokka" version "0.9.17"
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.12.0'
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

task javadocJar(type: Jar) {
    from dokka
    classifier 'javadoc'
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    testLogging.events("passed", "skipped", "failed")
}

group 'no.nav'
version '2.0.3'

sourceCompatibility = 1.8

repositories {
    maven { url "http://packages.confluent.io/maven" }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/spekframework/spek-dev" }
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.apache.commons:commons-io:$commons_version"
    implementation ("org.apache.kafka:kafka_2.12:$kafka_version") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        //cannot exclude next, zookeeper server will not find class org.apache.log4j.jmx.HierarchyDynamicMBean
        //exclude group: 'log4j', module: 'log4j'
    }
    implementation ("org.apache.kafka:kafka-streams:$kafka_version") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }
    implementation ("io.confluent:kafka-schema-registry:$confluent_version") {
        exclude group: 'org.apache.kafka'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }

    testImplementation "io.confluent:kafka-streams-avro-serde:$confluent_version" 
    //cannot include next due to org.apache.log4j.jmx.HierarchyDynamicMBean problem
    //implementation "org.slf4j:log4j-over-slf4j:$slf4j_version"
    testImplementation "ch.qos.logback:logback-classic:$logback_version"

    testImplementation "org.amshove.kluent:kluent:$kluent_version"
    testImplementation "io.ktor:ktor-client-core:$ktor_version"
    testImplementation "io.ktor:ktor-client-apache:$ktor_version"

    testImplementation ("org.spekframework.spek2:spek-dsl-jvm:$spek_version")  {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly ("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'kafka-embedded-env'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'kafka-embedded-env'
                description = 'Simple API for running a Kafka/Confluent environment locally'
                url = 'https://github.com/navikt/kafka-embedded-env'
                withXml {
                    asNode().appendNode('packaging', 'jar')
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        organization = "NAV (Arbeids- og velferdsdirektoratet) - The Norwegian Labour and Welfare Administration"
                        organizationUrl = "https://www.nav.no"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/navikt/kafka-embedded-env.git"
                    developerConnection = "scm:git:git://github.com/navikt/kafka-embedded-env.git"
                    url = "https://github.com/navikt/kafka-embedded-env"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username findProperty("ossrhUsername")
                password findProperty("ossrhPassword")
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

nexusStaging {
    username = findProperty("ossrhUsername")
    password = findProperty("ossrhPassword")
    packageGroup = 'no.nav'
}
